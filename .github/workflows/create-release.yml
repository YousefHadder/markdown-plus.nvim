name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.3.0)'
        required: true
        type: string
      publish_to_luarocks:
        description: 'Publish to LuaRocks immediately after release'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run (create PR but do not auto-merge)'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Target branch for PR (for testing, use current branch)'
        required: false
        type: string
        default: 'main'

jobs:
  # First verify tests pass before creating release
  verify:
    name: Pre-release verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: stable
      
      - name: Install plenary.nvim
        run: |
          mkdir -p ~/.local/share/nvim/site/pack/vendor/start
          git clone --depth 1 https://github.com/nvim-lua/plenary.nvim \
            ~/.local/share/nvim/site/pack/vendor/start/plenary.nvim
      
      - name: Install luacheck
        run: |
          echo "Installing luacheck..."
          sudo apt-get update
          sudo apt-get install -y luarocks
          sudo luarocks install luacheck
          
          echo "✓ luacheck installed"
          luacheck --version
      
      - name: Install StyLua
        uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
      
      - name: Run tests
        run: make test
      
      - name: Run lint
        run: make lint
      
      - name: Check formatting
        run: make format-check
  
  create-release:
    name: Create release
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    outputs:
      version: ${{ inputs.version }}
      pr_number: ${{ steps.pr.outputs.pr_number }}
      pr_url: ${{ steps.pr.outputs.pr_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate version format
        run: ./scripts/validate-version.sh "${{ inputs.version }}"
      
      - name: Extract changelog
        run: |
          ./scripts/extract-changelog.py "${{ inputs.version }}" > /tmp/changelog_content.txt
          echo "Extracted changelog:"
          cat /tmp/changelog_content.txt
      
      - name: Update CHANGELOG
        run: ./scripts/update-changelog.sh "${{ inputs.version }}"
      
      - name: Create versioned rockspec
        run: ./scripts/create-rockspec.sh "${{ inputs.version }}"
      
      - name: Create release branch
        id: branch
        run: |
          VERSION="${{ inputs.version }}"
          BRANCH="release/v${VERSION}"
          
          git checkout -b "$BRANCH"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          git add "$ROCKSPEC_FILE" CHANGELOG.md
          git commit -m "chore: release v${VERSION}
          
          - Add rockspec for v${VERSION}
          - Update CHANGELOG.md for v${VERSION} release"
          
          git push origin "$BRANCH"
          
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "✓ Created and pushed branch: $BRANCH"
      
      - name: Create enhanced release notes
        run: |
          ./scripts/create-release-notes.sh "${{ inputs.version }}" /tmp/changelog_content.txt > /tmp/release_notes.txt
          echo "Enhanced release notes:"
          cat /tmp/release_notes.txt
      
      - name: Create Pull Request
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          OUTPUT=$(./scripts/create-release-pr.sh \
            "${{ inputs.version }}" \
            "${{ steps.branch.outputs.branch }}" \
            "${{ inputs.target_branch }}" \
            "${{ inputs.dry_run }}" \
            "${{ inputs.publish_to_luarocks }}")
          
          # Parse output and set step outputs
          echo "$OUTPUT" | grep "^pr_number=" >> $GITHUB_OUTPUT
          echo "$OUTPUT" | grep "^pr_url=" >> $GITHUB_OUTPUT
      
      - name: Enable auto-merge
        if: inputs.dry_run != true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUMBER="${{ steps.pr.outputs.pr_number }}"
          
          echo "Enabling auto-merge for PR #${PR_NUMBER}..."
          gh pr merge "$PR_NUMBER" --auto --squash --delete-branch
          
          echo "✓ Auto-merge enabled"
      
      - name: Wait for PR to merge
        if: inputs.dry_run != true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUMBER="${{ steps.pr.outputs.pr_number }}"
          
          echo "Waiting for PR #${PR_NUMBER} to merge (max 10 minutes)..."
          
          # Poll until merged (max 10 minutes = 120 iterations * 5 seconds)
          for i in $(seq 1 120); do
            STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state')
            
            if [ "$STATE" = "MERGED" ]; then
              echo "✓ PR merged successfully!"
              break
            fi
            
            if [ "$STATE" = "CLOSED" ]; then
              echo "✗ PR was closed without merging"
              exit 1
            fi
            
            if [ $i -eq 120 ]; then
              echo "✗ Timeout waiting for PR to merge (10 minutes)"
              echo "Please check: ${{ steps.pr.outputs.pr_url }}"
              exit 1
            fi
            
            if [ $((i % 12)) -eq 0 ]; then
              echo "Still waiting... ($i/120) - Check status: ${{ steps.pr.outputs.pr_url }}"
            fi
            
            sleep 5
          done
      
      - name: Fetch merged commit
        if: inputs.dry_run != true
        run: |
          TARGET_BRANCH="${{ inputs.target_branch }}"
          
          echo "Fetching merged changes from $TARGET_BRANCH..."
          git fetch origin "$TARGET_BRANCH"
          git checkout "$TARGET_BRANCH"
          git pull origin "$TARGET_BRANCH"
          
          echo "✓ Updated to latest $TARGET_BRANCH branch"
      
      - name: Create and push tag
        if: inputs.dry_run != true
        id: tag
        run: |
          VERSION="${{ inputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Tag the current commit on main (which includes our merged changes)
          COMMIT_SHA=$(git rev-parse HEAD)
          git tag -a "v${VERSION}" "$COMMIT_SHA" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
          
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "✓ Created and pushed tag v${VERSION} at commit ${COMMIT_SHA:0:7}"
      
      - name: Create GitHub Release
        if: inputs.dry_run != true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ inputs.version }}"
          
          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes-file /tmp/release_notes.txt
          
          echo "✓ Created GitHub release: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
      
      - name: Trigger LuaRocks publish
        if: inputs.dry_run != true && inputs.publish_to_luarocks == true
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release-to-luarocks.yml',
              ref: '${{ inputs.target_branch }}',
              inputs: {
                version: '${{ inputs.version }}'
              }
            });
            console.log('✓ Triggered LuaRocks publish workflow');
      
      - name: Summary
        if: inputs.dry_run != true
        run: |
          VERSION="${{ inputs.version }}"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# ✅ Release v${VERSION} Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Tag**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- 🪨 **Rockspec**: markdown-plus.nvim-${VERSION}-1.rockspec" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 **PR**: ${{ steps.pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.publish_to_luarocks }}" = "true" ]; then
            echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "✅ LuaRocks publish workflow has been triggered automatically" >> $GITHUB_STEP_SUMMARY
            echo "Check the Actions tab to monitor the publish status" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "To publish to LuaRocks:" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to Actions → 'Release to LuaRocks'" >> $GITHUB_STEP_SUMMARY
            echo "2. Click 'Run workflow'" >> $GITHUB_STEP_SUMMARY
            echo "3. Enter version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "4. Click 'Run workflow'" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Dry run summary
        if: inputs.dry_run == true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 🔍 Dry Run Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release PR created but NOT auto-merged (dry run mode)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Created PR" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 **PR URL**: ${{ steps.pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the PR changes" >> $GITHUB_STEP_SUMMARY
          echo "2. If everything looks good, merge the PR manually" >> $GITHUB_STEP_SUMMARY
          echo "3. After merge, re-run this workflow without dry_run to create the tag and release" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup on failure
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ./scripts/cleanup-failed-release.sh \
            "${{ inputs.version }}" \
            "${{ steps.branch.outputs.branch }}" \
            "${{ steps.pr.outputs.pr_number }}"
