name: Release to LuaRocks

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to publish (e.g., 1.3.0)'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Release version to publish'
        required: true
        type: string
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'rockspecs/markdown-plus.nvim-*.rockspec'

jobs:
  luarocks-release:
    runs-on: ubuntu-latest
    # Only run if PR was merged or triggered manually
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
      
      - name: Determine version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Extract version from rockspec filename
            ROCKSPEC_FILE=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep 'rockspecs/markdown-plus.nvim-.*\.rockspec' | head -1)
            if [ -z "$ROCKSPEC_FILE" ]; then
              echo "Error: No rockspec file found in PR"
              exit 1
            fi
            VERSION=$(echo "$ROCKSPEC_FILE" | sed -n 's/.*markdown-plus\.nvim-\([0-9.]*\)-[0-9]\.rockspec/\1/p')
            if [ -z "$VERSION" ]; then
              echo "Error: Failed to extract version from rockspec filename: $ROCKSPEC_FILE"
              exit 1
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "‚úì Detected version from rockspec: $VERSION"
          else
            # Use workflow input
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "‚úì Using provided version: ${{ inputs.version }}"
          fi
      
      - name: Install LuaRocks
        run: |
          sudo apt-get update
          sudo apt-get install -y luarocks
          
          # Install required JSON library for luarocks upload
          sudo luarocks install dkjson
          
          echo "‚úì LuaRocks installed"
          luarocks --version
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.3.0)"
            exit 1
          fi
          echo "‚úì Version format is valid: $VERSION"
      
      - name: Verify release exists
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          if ! gh release view "v${VERSION}" > /dev/null 2>&1; then
            echo "Error: Release v${VERSION} does not exist"
            echo "Please create the release first using the 'Create Release' workflow"
            exit 1
          fi
          
          echo "‚úì GitHub release v${VERSION} found"
          gh release view "v${VERSION}" --json tagName,name,publishedAt
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Verify tag exists
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          if ! git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Error: Tag v${VERSION} does not exist"
            exit 1
          fi
          
          echo "‚úì Git tag v${VERSION} found"
          git show "v${VERSION}" --no-patch --format="%H %ci"
      
      - name: Set version output
        id: version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
      - name: Verify rockspec exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          if [ ! -f "$ROCKSPEC_FILE" ]; then
            echo "Error: Rockspec file $ROCKSPEC_FILE not found"
            echo ""
            echo "Available rockspecs:"
            ls -la rockspecs/*.rockspec || echo "No rockspecs found"
            echo ""
            echo "Please ensure the release workflow created the versioned rockspec."
            exit 1
          fi
          
          echo "‚úì Found rockspec: $ROCKSPEC_FILE"
          echo ""
          echo "Rockspec content:"
          cat "$ROCKSPEC_FILE"
      
      - name: Validate rockspec
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          echo "Validating rockspec with luarocks lint..."
          
          # Run lint and capture output
          LINT_OUTPUT_FILE="$(mktemp)"
          trap 'rm -f "$LINT_OUTPUT_FILE"' EXIT INT TERM
          
          if luarocks lint "$ROCKSPEC_FILE" 2>&1 | tee "$LINT_OUTPUT_FILE"; then
            echo "‚úì Rockspec validation passed"
          else
            echo "‚ö†Ô∏è  Rockspec has warnings/errors:"
            cat "$LINT_OUTPUT_FILE"
            echo ""
            echo "Continuing anyway (some warnings are acceptable)..."
          fi
      
      - name: Check if already published
        id: check_published
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "Checking if version ${VERSION} is already published to LuaRocks..."
          
          # Query the LuaRocks API to check if this specific version exists
          if curl -sf "https://luarocks.org/manifests/yousefhadder/markdown-plus.nvim-${VERSION}-1.rockspec" > /dev/null 2>&1; then
            echo "already_published=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Version ${VERSION} is already published to LuaRocks"
            echo "üîó https://luarocks.org/modules/yousefhadder/markdown-plus.nvim/${VERSION}"
          else
            echo "already_published=false" >> $GITHUB_OUTPUT
            echo "‚úì Version ${VERSION} not yet published (ready to upload)"
          fi
      
      - name: Check API key availability
        id: check_api_key
        env:
          LUAROCKS_API_KEY: ${{ secrets.LUAROCKS_API_KEY }}
        run: |
          if [ -n "$LUAROCKS_API_KEY" ]; then
            echo "has_api_key=true" >> $GITHUB_OUTPUT
            echo "‚úì LuaRocks API key is configured"
          else
            echo "has_api_key=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  LuaRocks API key is not configured"
          fi
      
      - name: Upload to LuaRocks
        if: steps.check_published.outputs.already_published != 'true' && steps.check_api_key.outputs.has_api_key == 'true'
        env:
          LUAROCKS_API_KEY: ${{ secrets.LUAROCKS_API_KEY }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          echo "Uploading rockspec to LuaRocks..."
          echo "File: $ROCKSPEC_FILE"
          echo ""
          
          # Upload with detailed output
          UPLOAD_OUTPUT_FILE="$(mktemp)"
          trap 'rm -f "$UPLOAD_OUTPUT_FILE"' EXIT INT TERM
          
          if luarocks upload "$ROCKSPEC_FILE" --api-key="$LUAROCKS_API_KEY" 2>&1 | tee "$UPLOAD_OUTPUT_FILE"; then
            echo ""
            echo "‚úì Successfully uploaded to LuaRocks!"
            echo "üì¶ Package: markdown-plus.nvim ${VERSION}"
          else
            EXIT_CODE=$?
            echo ""
            echo "‚úó Upload failed with exit code: $EXIT_CODE"
            echo ""
            echo "Output:"
            cat "$UPLOAD_OUTPUT_FILE"
            echo ""
            
            # Check for common errors
            if grep -q "already exists" "$UPLOAD_OUTPUT_FILE"; then
              echo "‚ùå Error: This version already exists on LuaRocks"
              echo "This may indicate the check step failed to detect it properly."
            elif grep -q "authentication" "$UPLOAD_OUTPUT_FILE"; then
              echo "‚ùå Error: Authentication failed"
              echo "Please verify the LUAROCKS_API_KEY secret is correct."
            fi
            
            exit 1
          fi
      
      - name: Verify upload
        if: steps.check_published.outputs.already_published != 'true' && steps.check_api_key.outputs.has_api_key == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Wait for LuaRocks to index the newly uploaded package
          # Typical propagation time is 10-60 seconds
          PROPAGATION_WAIT=60
          echo "Waiting for LuaRocks to index the package ($PROPAGATION_WAIT seconds)..."
          sleep $PROPAGATION_WAIT
          
          echo "Verifying package is available on LuaRocks..."
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Verification attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            if curl -sf "https://luarocks.org/manifests/yousefhadder/markdown-plus.nvim-${VERSION}-1.rockspec" > /dev/null 2>&1; then
              echo "‚úì Package verified on LuaRocks!"
              echo "üîó https://luarocks.org/modules/yousefhadder/markdown-plus.nvim/${VERSION}"
              exit 0
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "Not yet visible, waiting 15 seconds..."
              sleep 15
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "‚ö†Ô∏è  Package not yet visible after $((MAX_ATTEMPTS * 15 + PROPAGATION_WAIT)) seconds"
          echo "This is normal - LuaRocks indexing can take a few minutes."
          echo "Check manually: https://luarocks.org/modules/yousefhadder/markdown-plus.nvim"
      
      - name: Show API key setup instructions
        if: steps.check_api_key.outputs.has_api_key != 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# ‚ö†Ô∏è  LuaRocks API Key Not Configured" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cannot publish to LuaRocks without API key." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Setup Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. Get your API key from https://luarocks.org/settings/api-keys" >> $GITHUB_STEP_SUMMARY
          echo "2. Add it as a repository secret named \`LUAROCKS_API_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "‚ö†Ô∏è  Warning: LUAROCKS_API_KEY secret not configured"
          echo "Please add your LuaRocks API key to GitHub Secrets:"
          echo "https://github.com/${{ github.repository }}/settings/secrets/actions"
      
      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_published.outputs.already_published }}" = "true" ]; then
            echo "# ‚ÑπÔ∏è  Already Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Version v${VERSION} is already published to LuaRocks." >> $GITHUB_STEP_SUMMARY
            echo "No action taken." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check_api_key.outputs.has_api_key }}" = "true" ]; then
            echo "# ‚úÖ LuaRocks Release Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Successfully published markdown-plus.nvim v${VERSION} to LuaRocks!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Package Information" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ **Package**: markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "- üî¢ **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "- üîó **LuaRocks URL**: https://luarocks.org/modules/yousefhadder/markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Installation" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Install latest version" >> $GITHUB_STEP_SUMMARY
            echo "luarocks install markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Install specific version" >> $GITHUB_STEP_SUMMARY
            echo "luarocks install markdown-plus.nvim ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "# ‚ö†Ô∏è  Upload Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "LuaRocks API key not configured." >> $GITHUB_STEP_SUMMARY
            echo "See workflow logs for setup instructions." >> $GITHUB_STEP_SUMMARY
          fi
