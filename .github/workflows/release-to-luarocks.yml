name: Release to LuaRocks

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to publish (e.g., 1.3.0)'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Release version to publish'
        required: true
        type: string

jobs:
  luarocks-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Install LuaRocks
        run: |
          sudo apt-get update
          sudo apt-get install -y luarocks
          
          # Install required JSON library for luarocks upload
          sudo luarocks install dkjson
          
          echo "✓ LuaRocks installed"
          luarocks --version
      
      - name: Validate version format
        run: |
          if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.3.0)"
            exit 1
          fi
          echo "✓ Version format is valid: ${{ inputs.version }}"
      
      - name: Verify release exists
        run: |
          VERSION="${{ inputs.version }}"
          
          if ! gh release view "v${VERSION}" > /dev/null 2>&1; then
            echo "Error: Release v${VERSION} does not exist"
            echo "Please create the release first using the 'Create Release' workflow"
            exit 1
          fi
          
          echo "✓ GitHub release v${VERSION} found"
          gh release view "v${VERSION}" --json tagName,name,publishedAt
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Verify tag exists
        run: |
          VERSION="${{ inputs.version }}"
          
          if ! git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Error: Tag v${VERSION} does not exist"
            exit 1
          fi
          
          echo "✓ Git tag v${VERSION} found"
          git show "v${VERSION}" --no-patch --format="%H %ci"
      
      - name: Set version output
        id: version
        run: |
          VERSION="${{ inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
      - name: Verify rockspec exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          if [ ! -f "$ROCKSPEC_FILE" ]; then
            echo "Error: Rockspec file $ROCKSPEC_FILE not found"
            echo ""
            echo "Available rockspecs:"
            ls -la rockspecs/*.rockspec || echo "No rockspecs found"
            echo ""
            echo "Please ensure the release workflow created the versioned rockspec."
            exit 1
          fi
          
          echo "✓ Found rockspec: $ROCKSPEC_FILE"
          echo ""
          echo "Rockspec content:"
          cat "$ROCKSPEC_FILE"
      
      - name: Validate rockspec
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          echo "Validating rockspec with luarocks lint..."
          
          # Run lint and capture output
          LINT_OUTPUT_FILE="$(mktemp)"
          trap 'rm -f "$LINT_OUTPUT_FILE"' EXIT INT TERM
          
          if luarocks lint "$ROCKSPEC_FILE" 2>&1 | tee "$LINT_OUTPUT_FILE"; then
            echo "✓ Rockspec validation passed"
          else
            echo "⚠️  Rockspec has warnings/errors:"
            cat "$LINT_OUTPUT_FILE"
            echo ""
            echo "Continuing anyway (some warnings are acceptable)..."
          fi
      
      - name: Check if already published
        id: check_published
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Try to check if version already exists on LuaRocks
          # Note: This may fail if the package doesn't exist yet, which is fine
          if luarocks search markdown-plus.nvim "${VERSION}" 2>/dev/null | grep -q "${VERSION}"; then
            echo "already_published=true" >> $GITHUB_OUTPUT
            echo "⚠️  Version ${VERSION} appears to already be published to LuaRocks"
          else
            echo "already_published=false" >> $GITHUB_OUTPUT
            echo "✓ Version ${VERSION} not yet published (ready to upload)"
          fi
      
      - name: Check API key availability
        id: check_api_key
        env:
          LUAROCKS_API_KEY: ${{ secrets.LUAROCKS_API_KEY }}
        run: |
          if [ -n "$LUAROCKS_API_KEY" ]; then
            echo "has_api_key=true" >> $GITHUB_OUTPUT
            echo "✓ LuaRocks API key is configured"
          else
            echo "has_api_key=false" >> $GITHUB_OUTPUT
            echo "⚠️  LuaRocks API key is not configured"
          fi
      
      - name: Upload to LuaRocks
        if: steps.check_published.outputs.already_published != 'true' && steps.check_api_key.outputs.has_api_key == 'true'
        env:
          LUAROCKS_API_KEY: ${{ secrets.LUAROCKS_API_KEY }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ROCKSPEC_FILE="rockspecs/markdown-plus.nvim-${VERSION}-1.rockspec"
          
          echo "Uploading rockspec to LuaRocks..."
          echo ""
          
          # Upload with detailed output
          UPLOAD_OUTPUT_FILE="$(mktemp)"
          trap 'rm -f "$UPLOAD_OUTPUT_FILE"' EXIT INT TERM
          
          if luarocks upload "$ROCKSPEC_FILE" --api-key="$LUAROCKS_API_KEY" 2>&1 | tee "$UPLOAD_OUTPUT_FILE"; then
            echo ""
            echo "✓ Successfully uploaded to LuaRocks!"
          else
            echo ""
            echo "✗ Upload failed. Output:"
            cat "$UPLOAD_OUTPUT_FILE"
            exit 1
          fi
      
      - name: Verify upload
        if: steps.check_published.outputs.already_published != 'true' && steps.check_api_key.outputs.has_api_key == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Wait for LuaRocks to index the newly uploaded package
          # Typical propagation time is 10-30 seconds
          PROPAGATION_WAIT=30
          echo "Waiting for LuaRocks to index the package ($PROPAGATION_WAIT seconds)..."
          sleep $PROPAGATION_WAIT
          
          echo "Verifying package is available on LuaRocks..."
          if luarocks search markdown-plus.nvim "${VERSION}" 2>/dev/null | grep -q "${VERSION}"; then
            echo "✓ Package verified on LuaRocks!"
          else
            echo "⚠️  Package not yet visible (may take a few minutes to propagate)"
          fi
      
      - name: Show API key setup instructions
        if: steps.check_api_key.outputs.has_api_key != 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# ⚠️  LuaRocks API Key Not Configured" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cannot publish to LuaRocks without API key." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Setup Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. Get your API key from https://luarocks.org/settings/api-keys" >> $GITHUB_STEP_SUMMARY
          echo "2. Add it as a repository secret named \`LUAROCKS_API_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "⚠️  Warning: LUAROCKS_API_KEY secret not configured"
          echo "Please add your LuaRocks API key to GitHub Secrets:"
          echo "https://github.com/${{ github.repository }}/settings/secrets/actions"
      
      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_published.outputs.already_published }}" = "true" ]; then
            echo "# ℹ️  Already Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Version v${VERSION} is already published to LuaRocks." >> $GITHUB_STEP_SUMMARY
            echo "No action taken." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check_api_key.outputs.has_api_key }}" = "true" ]; then
            echo "# ✅ LuaRocks Release Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Successfully published markdown-plus.nvim v${VERSION} to LuaRocks!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Package Information" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 **Package**: markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "- 🔢 **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "- 🔗 **LuaRocks URL**: https://luarocks.org/modules/yousefhadder/markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Installation" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Install latest version" >> $GITHUB_STEP_SUMMARY
            echo "luarocks install markdown-plus.nvim" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Install specific version" >> $GITHUB_STEP_SUMMARY
            echo "luarocks install markdown-plus.nvim ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "# ⚠️  Upload Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "LuaRocks API key not configured." >> $GITHUB_STEP_SUMMARY
            echo "See workflow logs for setup instructions." >> $GITHUB_STEP_SUMMARY
          fi
